// Copyright 2019 The lime Authors.
// Use of this source code is governed by a 2-clause
// BSD-style license that can be found in the LICENSE file.

// This file was generated by gen_python_api.go and shouldn't be manually modified

package api

import (
	"fmt"

	"github.com/jxo/lime"
	"github.com/jxo/lime/text"
	"github.com/jxo/lime/util"
	"github.com/limetext/gopy"
)

var (
	_ = lime.View{}
	_ = text.Region{}
	_ = fmt.Errorf
	_ = util.Settings{}
)

var _windowClass = py.Class{
	Name:    "sublime.Window",
	Pointer: (*Window)(nil),
}

type Window struct {
	py.BaseObject
	data *lime.Window
}

func (o *Window) PyInit(args *py.Tuple, kwds *py.Dict) error {
	return fmt.Errorf("Can't initialize type Window")
}
func (o *Window) Py_active_view() (py.Object, error) {
	ret0 := o.data.ActiveView()
	var err error
	var pyret0 py.Object

	pyret0, err = toPython(ret0)
	if err != nil {
		return nil, err
	}
	return pyret0, err
}

func (o *Window) Py_id() (py.Object, error) {
	ret0 := o.data.ID()
	var err error
	var pyret0 py.Object

	pyret0, err = toPython(ret0)
	if err != nil {
		return nil, err
	}
	return pyret0, err
}

func (o *Window) Py_new_file() (py.Object, error) {
	fmt.Printf("new_file, %p %p\n", o, o.data)
	ret0 := o.data.NewFile()
	var err error
	var pyret0 py.Object

	pyret0, err = toPython(ret0)
	if err != nil {
		return nil, err
	}
	return pyret0, err
}

func (o *Window) Py_settings() (py.Object, error) {
	ret0 := o.data.Settings()
	var err error
	var pyret0 py.Object

	pyret0, err = toPython(ret0)
	if err != nil {
		return nil, err
	}
	return pyret0, err
}

func (o *Window) PyStr() string {
	return o.data.String()
}

func (o *Window) Py_views() (py.Object, error) {
	ret0 := o.data.Views()
	var err error
	var pyret0 py.Object

	pyret0, err = toPython(ret0)
	if err != nil {
		return nil, err
	}
	return pyret0, err
}
