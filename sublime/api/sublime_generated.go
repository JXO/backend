// Copyright 2017 The lime Authors.
// Use of this source code is governed by a 2-clause
// BSD-style license that can be found in the LICENSE file.

// This file was generated by gen_python_api.go and shouldn't be manually modified

package api

import (
	"fmt"

	"github.com/jxo/lime"
	"github.com/limetext/gopy"
	"github.com/jxo/lime/text"
)

var (
	_ = lime.View{}
	_ = text.Region{}
	_ = fmt.Errorf
)

func sublime_ActiveWindow() (py.Object, error) {
	ret0 := lime.GetEditor().ActiveWindow()
	var err error
	var pyret0 py.Object

	pyret0, err = toPython(ret0)
	if err != nil {
		return nil, err
	}
	return pyret0, err
}

func sublime_Arch() (py.Object, error) {
	ret0 := lime.GetEditor().Arch()
	var err error
	var pyret0 py.Object

	pyret0, err = toPython(ret0)
	if err != nil {
		return nil, err
	}
	return pyret0, err
}

func sublime_GetClipboard() (py.Object, error) {
	ret0 := lime.GetEditor().GetClipboard()
	var err error
	var pyret0 py.Object

	pyret0, err = toPython(ret0)
	if err != nil {
		return nil, err
	}
	return pyret0, err
}

func sublime_LogCommands(tu *py.Tuple) (py.Object, error) {
	var (
		arg1 bool
	)
	if v, err := tu.GetItem(0); err != nil {
		return nil, err
	} else {
		if v3, err2 := fromPython(v); err2 != nil {
			return nil, err2
		} else {
			if v2, ok := v3.(bool); !ok {
				return nil, fmt.Errorf("Expected type bool for lime.Editor.LogCommands() arg1, not %s", v.Type())
			} else {
				arg1 = v2
			}
		}
	}
	lime.GetEditor().LogCommands(arg1)
	return toPython(nil)
}

func sublime_LogInput(tu *py.Tuple) (py.Object, error) {
	var (
		arg1 bool
	)
	if v, err := tu.GetItem(0); err != nil {
		return nil, err
	} else {
		if v3, err2 := fromPython(v); err2 != nil {
			return nil, err2
		} else {
			if v2, ok := v3.(bool); !ok {
				return nil, fmt.Errorf("Expected type bool for lime.Editor.LogInput() arg1, not %s", v.Type())
			} else {
				arg1 = v2
			}
		}
	}
	lime.GetEditor().LogInput(arg1)
	return toPython(nil)
}

func sublime_PackagesPath() (py.Object, error) {
	ret0 := lime.GetEditor().PackagesPath()
	var err error
	var pyret0 py.Object

	pyret0, err = toPython(ret0)
	if err != nil {
		return nil, err
	}
	return pyret0, err
}

func sublime_Platform() (py.Object, error) {
	ret0 := lime.GetEditor().Platform()
	var err error
	var pyret0 py.Object

	pyret0, err = toPython(ret0)
	if err != nil {
		return nil, err
	}
	return pyret0, err
}

func sublime_RunCommand(tu *py.Tuple) (py.Object, error) {
	var (
		arg1 string
		arg2 lime.Args
	)
	if v, err := tu.GetItem(0); err != nil {
		return nil, err
	} else {
		if v3, err2 := fromPython(v); err2 != nil {
			return nil, err2
		} else {
			if v2, ok := v3.(string); !ok {
				return nil, fmt.Errorf("Expected type string for lime.Editor.RunCommand() arg1, not %s", v.Type())
			} else {
				arg1 = v2
			}
		}
	}
	arg2 = make(lime.Args)
	if v, err := tu.GetItem(1); err == nil {
		if v3, err2 := fromPython(v); err2 != nil {
			return nil, err2
		} else {
			if v2, ok := v3.(lime.Args); !ok {
				return nil, fmt.Errorf("Expected type lime.Args for lime.Editor.RunCommand() arg2, not %s", v.Type())
			} else {
				arg2 = v2
			}
		}
	}
	lime.GetEditor().RunCommand(arg1, arg2)
	return toPython(nil)
}

func sublime_SetClipboard(tu *py.Tuple) (py.Object, error) {
	var (
		arg1 string
	)
	if v, err := tu.GetItem(0); err != nil {
		return nil, err
	} else {
		if v3, err2 := fromPython(v); err2 != nil {
			return nil, err2
		} else {
			if v2, ok := v3.(string); !ok {
				return nil, fmt.Errorf("Expected type string for lime.Editor.SetClipboard() arg1, not %s", v.Type())
			} else {
				arg1 = v2
			}
		}
	}
	lime.GetEditor().SetClipboard(arg1)
	return toPython(nil)
}

func sublime_Version() (py.Object, error) {
	ret0 := lime.GetEditor().Version()
	var err error
	var pyret0 py.Object

	pyret0, err = toPython(ret0)
	if err != nil {
		return nil, err
	}
	return pyret0, err
}

func sublime_Windows() (py.Object, error) {
	ret0 := lime.GetEditor().Windows()
	var err error
	var pyret0 py.Object

	pyret0, err = toPython(ret0)
	if err != nil {
		return nil, err
	}
	return pyret0, err
}

var generated_methods = []py.Method{
	{Name: "register", Func: sublime_Register},
	{Name: "unregister", Func: sublime_Unregister},
	{Name: "active_window", Func: sublime_ActiveWindow},
	{Name: "arch", Func: sublime_Arch},
	{Name: "get_clipboard", Func: sublime_GetClipboard},
	{Name: "log_commands", Func: sublime_LogCommands},
	{Name: "log_input", Func: sublime_LogInput},
	{Name: "packages_path", Func: sublime_PackagesPath},
	{Name: "platform", Func: sublime_Platform},
	{Name: "run_command", Func: sublime_RunCommand},
	{Name: "set_clipboard", Func: sublime_SetClipboard},
	{Name: "version", Func: sublime_Version},
	{Name: "windows", Func: sublime_Windows},
}
